from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram3_calendar import dialog_calendar, simple_calendar, simple_cal_callback, dialog_cal_callback, SimpleCalendar
from datetime import datetime, date, timedelta

from app.keyboards import keyboard_back_to_day_menu
from config import WEEK_DAYS

import app.keyboards as kb

class ScheduleStates(StatesGroup):
    current_date = State()  

router = Router()
selected_dates = {}
register_user = {1486454337}


def is_user_registered(user_id: int) -> bool:
    return int(user_id) in register_user

# --- –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å ---
async def show_schedule_for_date(message_or_callback, day: date):
    text = (
        f"üìò <b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ {day.strftime('%d.%m.%Y')}:</b>\n\n"
        f"–ù–æ–º–µ—Ä –ø–∞—Ä–∏\n"
        f"üéì –ù–∞–∑–≤–∞ –ø–∞—Ä–∏\n"
        f"üïí –ß–∞—Å: 09:00‚Äì10:20\n"
        f"üë®‚Äçüè´ –í–∏–∫–ª–∞–¥–∞—á: –Ü–º‚Äô—è –ü—Ä—ñ–∑–≤–∏—â–µ\n"
        f"üìç –ê—É–¥–∏—Ç–æ—Ä—ñ—è ‚Ññ123 \ –ü–æ—Å–∏–ª–∞–Ω–Ω—è htpps\...\n"
    )

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ–±'—î–∫—Ç —î CallbackQuery (–Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è inline-–∫–Ω–æ–ø–∫–∏)
    # –Ø–∫—â–æ —Ç–∞–∫ ‚Äî —Ä–µ–¥–∞–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –≤–∂–µ —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    # –Ü–Ω–∞–∫—à–µ (Message) ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    # parse_mode="HTML" –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ HTML-—Ç–µ–≥–∏ —É —Ç–µ–∫—Å—Ç—ñ
    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(text=text, reply_markup=keyboard_back_to_day_menu, parse_mode="HTML")
    else:
        await message_or_callback.answer(text=text, reply_markup=keyboard_back_to_day_menu, parse_mode="HTML")

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è /start
@router.message(CommandStart())
async def cmd_start(message: Message):
   # user_id = message.from_user.id

    #if not is_user_registered(user_id):
       # await message.answer(
          #  f"–ü—Ä–∏–≤—ñ—Ç, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.username or ""} üëã\n"
          #  "–ë—É–¥—å-–ª–∞—Å–∫–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è —É –≤–µ–±–¥–æ–¥–∞—Ç–∫—É üåê\n"
       # )
     #   return


 #   await message.delete()
    await message.answer(
       f"–ü—Ä–∏–≤—ñ—Ç, —Å—Ç—É–¥–µ–Ω—Ç–µ [—ñ–º‚Äô—è!] üëã\n–Ø ‚Äî –±–æ—Ç –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º –§–Ü–¢ üè´\n–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ‚¨áÔ∏è\n",
        reply_markup=kb.main
    )

@router.callback_query(F.data == "timetable_for_day")
async def day_schedule_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        text="üìÖ <b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å</b>\n–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ ‚¨áÔ∏è",
        reply_markup=kb.keyboard_day,
        parse_mode="HTML"
    )

@router.callback_query(F.data.in_({"timetable_for_today", "timetable_for_tomorrow"}))
async def day_schedule_callback(callback: CallbackQuery):
    day = date.today() if callback.data == "timetable_for_today" else date.today() + timedelta(days=1)
    await show_schedule_for_date(callback, day)

@router.callback_query(F.data == "back_to_main")
async def get_back(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("–ü—Ä–∏–≤—ñ—Ç, —Å—Ç—É–¥–µ–Ω—Ç–µ [—ñ–º‚Äô—è!] üëã\n–Ø ‚Äî –±–æ—Ç –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º –§–Ü–¢ üè´\n–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ‚¨áÔ∏è\n", reply_markup= kb.main)


@router.callback_query(F.data == "alert_settings")
async def catalog(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤ web app \n",
        reply_markup= kb.alert_setting)


#@router.callback_query(F.data == "open_calendar")
#async def open_calendar(callback: CallbackQuery):
   # await callback.answer()  
   #reply_markup = await UkrainianCalendar().start_calendar()
 #   await callback.message.edit_text(
 #      ,
 #       reply_markup=reply_markup
 #   )
@router.callback_query(F.data == "timetable_for_day_you_want")
async def ask_for_day(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(ScheduleStates.current_date)

    cal_markup = await SimpleCalendar().start_calendar()
    exit_btn = InlineKeyboardButton(text="–í–∏–π—Ç–∏ ‚ùå", callback_data="calendar_exit")
    cal_markup.inline_keyboard.append([exit_btn])
    reply_markup = cal_markup


    await callback.message.edit_text(
        "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:\n ",
        reply_markup=reply_markup
    )

@router.callback_query(simple_cal_callback.filter())
async def process_calendar(callback: CallbackQuery, callback_data: dict, state: FSMContext):
    calendar = SimpleCalendar()
    selected, date = await calendar.process_selection(callback, callback_data)

    if not selected:
        return

    current_state = await state.get_state()
    if current_state != ScheduleStates.current_date:
        return


    await state.update_data(current_day=date.strftime('%d.%m.%Y'))


    await callback.message.edit_text(
        f"üìò –†–æ–∑–∫–ª–∞–¥ –Ω–∞ {date.strftime('%d.%m.%Y')}:\n\n"
        f"–ù–æ–º–µ—Ä –ø–∞—Ä–∏\n"
        f"üéì –ù–∞–∑–≤–∞ –ø–∞—Ä–∏\n"
        f"üïí –ß–∞—Å: 09:00‚Äì10:20\n"
        f"üë®‚Äçüè´ –í–∏–∫–ª–∞–¥–∞—á: –Ü–º‚Äô—è –ü—Ä—ñ–∑–≤–∏—â–µ\n"
        f"üìç –ê—É–¥–∏—Ç–æ—Ä—ñ—è ‚Ññ123 \ –ü–æ—Å–∏–ª–∞–Ω–Ω—è htpps...\n", reply_markup= kb.table_one)
    await state.clear()  


@router.callback_query(F.data == "calendar_exit")
async def cancel_calendar(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.edit_text("–í–∏–±—ñ—Ä –¥–∞—Ç–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=kb.main)
     

def get_monday(d: datetime.date) -> datetime.date:
    return d - datetime.timedelta(days=d.weekday())

@router.callback_query(F.data == "timetable_for_week")
async def catalog(callback: CallbackQuery):
    await callback.answer()

    start_date = get_monday(datetime.date.today())              
    end_date = start_date + datetime.timedelta(days=6)       

    await callback.message.edit_text(
        "üìò –í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞ —è–∫–∏–π —Ç–∏–∂–¥–µ–Ω—å :\n", reply_markup= kb.table_two
    )

@router.callback_query(F.data == "timetable_for_next_week")
async def catalog(callback: CallbackQuery):
    await callback.answer()

    start_date = get_monday(datetime.date.today()) + datetime.timedelta(days=7)  
    end_date = start_date + datetime.timedelta(days=6)                    

    await callback.message.edit_text(
        f"üóìÔ∏è –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å {start_date.strftime('%d.%m.%y')} - {end_date.strftime('%d.%m.%y')}:\n[–Ø–∫–∏–π—Å—å —Ä–æ–∑–∫–ª–∞–¥]",
        reply_markup= kb.table_two
    )

@router.callback_query(F.data == "timetable_for_that_week")
async def catalog(callback: CallbackQuery):
    await callback.answer()  
    start_date = get_monday(datetime.date.today())              
    end_date = start_date + datetime.timedelta(days=6)                  

    await callback.message.edit_text(
        f"üóìÔ∏è –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å {start_date.strftime('%d.%m.%y')} - {end_date.strftime('%d.%m.%y')}:\n\n",
        reply_markup= kb.table_two
    )


